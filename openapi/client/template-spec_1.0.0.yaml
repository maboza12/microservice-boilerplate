openapi: "3.0.3"
info:
  title: Microservice Boilerplate
  description: Microservice boilerplate uses an API-First approach to generate code
  version: 1.0.0
  termsOfService: http://swagger.io/terms/
  contact:
    name: Platform Support Team
    email: platform@bakkt.com
    url: https://sherwoodforest.atlassian.net/wiki/spaces/ARC/pages/2754609318/API-First+Development
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: 'https://microservice.bakkt.com'
    
paths:
                
  /person/{id}:
    post:
      tags:
        - person
      summary: Updates a person
      description: Updates a person with new info
      operationId: updatePersonWithForm
      parameters:
        - name: id
          in: path
          description: ID of person that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          description: Name of person that needs to be updated
          schema:
            type: string
        - name: age
          in: query
          description: Age of person that needs to be updated
          schema:
            type: integer
            minimum: 21
            maximum: 100
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '405':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    get:
      tags: 
        - person
      description: Returns a user based on a single ID
      operationId: personById
      parameters:
        - name: id
          in: path
          description: ID of result
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  

components:
  schemas:

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          
    Person:
      type: object
      required:
        - id
        - name
        - age
      properties:
        id:
          type: string
          format: uuid
          example: 7f82015b-25bb-48a3-851a-34edf4f99096
        name:
          type: string
          example: Tom Ford
        age:
          type: integer
          format: int64
          example: 43
          minimum: 1
          maximum: 100

tags:
  - name: person